{
  "version": 3,
  "sources": ["../../@remix-run/router/history.ts", "../../@remix-run/router/utils.ts", "../../@remix-run/router/router.ts"],
  "sourcesContent": ["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLAC e navigations for data routers\n   * behave the same as POP\n   *\n   * @param location The incoming location from router.navigate()\n   */\n  encodeLocation(location: Location): Location;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n    encodeLocation(location) {\n      return location;\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n      if (listener) {\n        listener({ action, location: getCurrentLocation() });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\nfunction warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport function createURL(location: Location | string): URL {\n  // window.location.origin is \"null\" (the literal string value) in Firefox\n  // under certain conditions, notably when serving from a local HTML file\n  // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n  let base =\n    typeof window !== \"undefined\" &&\n    typeof window.location !== \"undefined\" &&\n    window.location.origin !== \"null\"\n      ? window.location.origin\n      : \"unknown://unknown\";\n  let href = typeof location === \"string\" ? location : createPath(location);\n  return new URL(href, base);\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function handlePop() {\n    action = Action.Pop;\n    if (listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    encodeLocation(location) {\n      // Encode a Location the same way window.location would\n      let url = createURL(createPath(location));\n      return {\n        ...location,\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n", "import type { Location, Path, To } from \"./history\";\nimport { parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\nexport type FormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: Exclude<FormMethod, \"get\">;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `${string}:${infer Param}`\n    ? Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  parentPath: number[] = [],\n  allIds: Set<string> = new Set<string>()\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !allIds.has(id),\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = { ...route, id };\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        id,\n        children: route.children\n          ? convertRoutesToDataRoutes(route.children, treePath, allIds)\n          : undefined,\n      };\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  routes.forEach((route, index) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({ path, score: computeScore(path, route.index), routesMeta });\n  });\n\n  return branches;\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  path: Path,\n  params: {\n    [key in PathParam<Path>]: string;\n  } = {} as any\n): string {\n  return path\n    .replace(/:(\\w+)/g, (_, key: PathParam<Path>) => {\n      invariant(params[key] != null, `Missing \":${key}\" param`);\n      return params[key]!;\n    })\n    .replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n      const star = \"*\" as PathParam<Path>;\n\n      if (params[star] == null) {\n        // If no splat was provided, trim the trailing slash _unless_ it's\n        // the entire path\n        return str === \"/*\" ? \"/\" : \"\";\n      }\n\n      // Apply the splat\n      return `${prefix}${params[star]}`;\n    });\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\n/**\n * @private\n */\nexport function warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeys: Set<string | number> = new Set<string | number>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscriber?: (aborted: boolean) => void = undefined;\n  data: Record<string, unknown>;\n\n  constructor(data: Record<string, unknown>) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n  }\n\n  private trackPromise(\n    key: string | number,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.pendingKeys.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string | number,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeys.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    const subscriber = this.subscriber;\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      subscriber && subscriber(false);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    subscriber && subscriber(false);\n    return data;\n  }\n\n  subscribe(fn: (aborted: boolean) => void) {\n    this.subscriber = fn;\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeys.forEach((v, k) => this.pendingKeys.delete(k));\n    let subscriber = this.subscriber;\n    subscriber && subscriber(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeys.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport function defer(data: Record<string, unknown>) {\n  return new DeferredData(data);\n}\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n\n  constructor(status: number, statusText: string | undefined, data: any) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.data = data;\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\nexport function isRouteErrorResponse(e: any): e is ErrorResponse {\n  return e instanceof ErrorResponse;\n}\n", "import type { History, Location, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  createURL,\n  parsePath,\n} from \"./history\";\nimport type {\n  DataResult,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n} from \"./utils\";\nimport {\n  DeferredData,\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  invariant,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): void;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To, opts?: RouterNavigateOptions): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  basename?: string;\n  routes: AgnosticRouteObject[];\n  history: History;\n  hydrationData?: HydrationState;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(request: Request): Promise<StaticHandlerContext | Response>;\n  queryRoute(request: Request, routeId?: string): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  formMethod?: FormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Tuple of [key, href, DataRouteMatch, DataRouteMatch[]] for a revalidating\n * fetcher.load()\n */\ntype RevalidatingFetcher = [\n  string,\n  string,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteMatch[]\n];\n\n/**\n * Tuple of [href, DataRouteMatch, DataRouteMatch[]] for an active\n * fetcher.load()\n */\ntype FetchLoadMatch = [\n  string,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteMatch[]\n];\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes);\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  let initialScrollRestored = false;\n\n  let initialMatches = matchRoutes(\n    dataRoutes,\n    init.history.location,\n    init.basename\n  );\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let { matches, route, error } = getNotFoundMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    !initialMatches.some((m) => m.route.loader) || init.hydrationData != null;\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location }) =>\n        startNavigation(historyAction, location)\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - The location we've finished loading is different from the submission\n    //   location, indicating we redirected from the action (avoids false\n    //   positives for loading/submissionRedirect when actionData returned\n    //   on a prior submission)\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      state.navigation.state === \"loading\" &&\n      state.navigation.formAction?.split(\"?\")[0] === location.pathname;\n\n    // Always preserve any existing loaderData from re-used routes\n    let newLoaderData = newState.loaderData\n      ? {\n          loaderData: mergeLoaderData(\n            state.loaderData,\n            newState.loaderData,\n            newState.matches || []\n          ),\n        }\n      : {};\n\n    updateState({\n      // Clear existing actionData on any completed navigation beyond the original\n      // action, unless we're currently finishing the loading/actionReload state.\n      // Do this prior to spreading in newState in case we got back to back actions\n      ...(isActionReload ? {} : { actionData: null }),\n      ...newState,\n      ...newLoaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData\n        ? false\n        : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset,\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(to, opts);\n\n    let location = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    location = init.history.encodeLocation(location);\n\n    let historyAction =\n      (opts && opts.replace) === true || submission != null\n        ? HistoryAction.Replace\n        : HistoryAction.Push;\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error,\n      } = getNotFoundMatches(dataRoutes);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createRequest(\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (opts && opts.submission) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = getMethodNotAllowedResult(location);\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        router.basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let redirectNavigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location: createLocation(state.location, result.location),\n        ...submission,\n      };\n      await startRedirectNavigation(\n        result,\n        redirectNavigation,\n        opts && opts.replace\n      );\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      loadingNavigation = navigation;\n    }\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      pendingActionData,\n      pendingError,\n      fetchLoadMatches\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: mergeLoaderData(state.loaderData, {}, matches),\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        actionData: pendingActionData || null,\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(([key]) => {\n        let fetcher = state.fetchers.get(key);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      updateState({\n        navigation: loadingNavigation,\n        actionData: pendingActionData || state.actionData || null,\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(([key]) =>\n      fetchControllers.set(key, pendingNavigationController!)\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    revalidatingFetchers.forEach(([key]) => fetchControllers.delete(key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation, replace);\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n    if (!matches) {\n      setFetcherError(key, routeId, new ErrorResponse(404, \"Not Found\", null));\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    if (submission) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, [path, match, matches]);\n    handleFetcherLoader(key, routeId, path, match, matches);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let { error } = getMethodNotAllowedResult(path);\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      router.basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      let redirectNavigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location: createLocation(state.location, actionResult.location),\n        ...submission,\n      };\n      await startRedirectNavigation(actionResult, redirectNavigation);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      invariant(false, \"defer() is not supported in actions\");\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createRequest(\n      nextLocation,\n      abortController.signal\n    );\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(dataRoutes, state.navigation.location, init.basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      { [match.route.id]: actionResult.data },\n      undefined, // No need to send through errors since we short circuit above\n      fetchLoadMatches\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter(([staleKey]) => staleKey !== key)\n      .forEach(([staleKey]) => {\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: existingFetcher && existingFetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(([staleKey]) =>\n      fetchControllers.delete(staleKey)\n    );\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation);\n      return;\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[]\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      data: existingFetcher && existingFetcher.data,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      router.basename\n    );\n\n    // Deferred isn't supported or fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      let redirectNavigation = getLoaderRedirect(state, result);\n      await startRedirectNavigation(result, redirectNavigation);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    redirect: RedirectResult,\n    navigation: Navigation,\n    replace?: boolean\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    invariant(\n      navigation.location,\n      \"Expected a location on the redirect navigation\"\n    );\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    await startNavigation(redirectHistoryAction, navigation.location, {\n      overrideNavigation: navigation,\n    });\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\"loader\", request, match, matches, router.basename)\n      ),\n      ...fetchersToLoad.map(([, href, match, fetchMatches]) =>\n        callLoaderOrAction(\n          \"loader\",\n          createRequest(href, request.signal),\n          match,\n          fetchMatches,\n          router.basename\n        )\n      ),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        request.signal,\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map(([, , match]) => match),\n        fetcherResults,\n        request.signal,\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nconst validActionMethods = new Set([\"POST\", \"PUT\", \"PATCH\", \"DELETE\"]);\nconst validRequestMethods = new Set([\"GET\", \"HEAD\", ...validActionMethods]);\n\nexport function unstable_createStaticHandler(\n  routes: AgnosticRouteObject[]\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to unstable_createStaticHandler\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location);\n\n    if (!validRequestMethods.has(request.method)) {\n      let {\n        matches: methodNotAllowedMatches,\n        route,\n        error,\n      } = getMethodNotAllowedMatches(dataRoutes);\n      return {\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    } else if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error,\n      } = getNotFoundMatches(dataRoutes);\n      return {\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    }\n\n    let result = await queryImpl(request, location, matches);\n    if (result instanceof Response) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated thrown Response (such as a\n   * 404 or 405) will have a custom X-Remix-Router-Error: \"yes\" header on it\n   * in order to differentiate from responses thrown from user actions/loaders.\n   */\n  async function queryRoute(request: Request, routeId?: string): Promise<any> {\n    let url = new URL(request.url);\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location);\n\n    if (!validRequestMethods.has(request.method)) {\n      throw createRouterErrorResponse(null, {\n        status: 405,\n        statusText: \"Method Not Allowed\",\n      });\n    } else if (!matches) {\n      throw createRouterErrorResponse(null, {\n        status: 404,\n        statusText: \"Not Found\",\n      });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (!match) {\n      throw createRouterErrorResponse(null, {\n        status: 404,\n        statusText: \"Not Found\",\n      });\n    }\n\n    let result = await queryImpl(request, location, matches, match);\n    if (result instanceof Response) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    let routeData = [result.actionData, result.loaderData].find((v) => v);\n    return Object.values(routeData || {})[0];\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (validActionMethods.has(request.method)) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(request, matches, routeMatch);\n      return result instanceof Response\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\"> | Response> {\n    let result: DataResult;\n    if (!actionMatch.route.action) {\n      if (isRouteRequest) {\n        throw createRouterErrorResponse(null, {\n          status: 405,\n          statusText: \"Method Not Allowed\",\n        });\n      }\n      result = getMethodNotAllowedResult(request.url);\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        undefined, // Basename not currently supported in static handlers\n        true,\n        isRouteRequest\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n        return {\n          matches: [actionMatch],\n          loaderData: {},\n          actionData: null,\n          errors: {\n            [boundaryMatch.route.id]: result.error,\n          },\n          // Note: statusCode + headers are unused here since queryRoute will\n          // return the raw Response or value\n          statusCode: 500,\n          loaderHeaders: {},\n          actionHeaders: {},\n        };\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, undefined, {\n        [boundaryMatch.route.id]: result.error,\n      });\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    let context = await loadRouteData(request, matches);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<StaticHandlerContext, \"location\" | \"actionData\" | \"actionHeaders\">\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter((m) => m.route.loader);\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        loaderData: {},\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          undefined, // Basename not currently supported in static handlers\n          true,\n          isRouteRequest\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Can't do anything with these without the Remix side of things, so just\n    // cancel them for now\n    results.forEach((result) => {\n      if (isDeferredResult(result)) {\n        result.deferredData.cancel();\n      }\n    });\n\n    // Process and commit output from loaders\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError\n    );\n\n    return {\n      ...context,\n      matches,\n    };\n  }\n\n  function createRouterErrorResponse(\n    body: BodyInit | null | undefined,\n    init: ResponseInit\n  ) {\n    return new Response(body, {\n      ...init,\n      headers: {\n        ...init.headers,\n        \"X-Remix-Router-Error\": \"yes\",\n      },\n    });\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  to: To,\n  opts?: RouterNavigateOptions,\n  isFetcher = false\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  let path = typeof to === \"string\" ? to : createPath(to);\n\n  // Return location verbatim on non-submission navigations\n  if (!opts || (!(\"formMethod\" in opts) && !(\"formData\" in opts))) {\n    return { path };\n  }\n\n  // Create a Submission on non-GET navigations\n  if (opts.formMethod != null && opts.formMethod !== \"get\") {\n    return {\n      path,\n      submission: {\n        formMethod: opts.formMethod,\n        formAction: stripHashFromPath(path),\n        formEncType:\n          (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n        formData: opts.formData,\n      },\n    };\n  }\n\n  // No formData to flatten for GET submission\n  if (!opts.formData) {\n    return { path };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  try {\n    let searchParams = convertFormDataToSearchParams(opts.formData);\n    // Since fetcher GET submissions only run a single loader (as opposed to\n    // navigation GET submissions which run all loaders), we need to preserve\n    // any incoming ?index params\n    if (\n      isFetcher &&\n      parsedPath.search &&\n      hasNakedIndexQuery(parsedPath.search)\n    ) {\n      searchParams.append(\"index\", \"\");\n    }\n    parsedPath.search = `?${searchParams}`;\n  } catch (e) {\n    return {\n      path,\n      error: new ErrorResponse(\n        400,\n        \"Bad Request\",\n        \"Cannot submit binary form data using GET\"\n      ),\n    };\n  }\n\n  return { path: createPath(parsedPath) };\n}\n\nfunction getLoaderRedirect(\n  state: RouterState,\n  redirect: RedirectResult\n): Navigation {\n  let { formMethod, formAction, formEncType, formData } = state.navigation;\n  let navigation: NavigationStates[\"Loading\"] = {\n    state: \"loading\",\n    location: createLocation(state.location, redirect.location),\n    formMethod: formMethod || undefined,\n    formAction: formAction || undefined,\n    formEncType: formEncType || undefined,\n    formData: formData || undefined,\n  };\n  return navigation;\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  pendingActionData?: RouteData,\n  pendingError?: RouteData,\n  fetchLoadMatches?: Map<string, FetchLoadMatch>\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : null;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter(\n    (match, index) =>\n      match.route.loader != null &&\n      (isNewLoader(state.loaderData, state.matches[index], match) ||\n        // If this route had a pending deferred cancelled it must be revalidated\n        cancelledDeferredRoutes.some((id) => id === match.route.id) ||\n        shouldRevalidateLoader(\n          state.location,\n          state.matches[index],\n          submission,\n          location,\n          match,\n          isRevalidationRequired,\n          actionResult\n        ))\n  );\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches &&\n    fetchLoadMatches.forEach(([href, match, fetchMatches], key) => {\n      // This fetcher was cancelled from a prior action submission - force reload\n      if (cancelledFetcherLoads.includes(key)) {\n        revalidatingFetchers.push([key, href, match, fetchMatches]);\n      } else if (isRevalidationRequired) {\n        let shouldRevalidate = shouldRevalidateLoader(\n          href,\n          match,\n          submission,\n          href,\n          match,\n          isRevalidationRequired,\n          actionResult\n        );\n        if (shouldRevalidate) {\n          revalidatingFetchers.push([key, href, match, fetchMatches]);\n        }\n      }\n    });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  currentLocation: string | Location,\n  currentMatch: AgnosticDataRouteMatch,\n  submission: Submission | undefined,\n  location: string | Location,\n  match: AgnosticDataRouteMatch,\n  isRevalidationRequired: boolean,\n  actionResult: DataResult | undefined\n) {\n  let currentUrl = createURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createURL(location);\n  let nextParams = match.params;\n\n  // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n  let defaultShouldRevalidate =\n    isNewRouteInstance(currentMatch, match) ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search ||\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    let routeChoice = match.route.shouldRevalidate({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate,\n    });\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  basename: string | undefined,\n  isStaticRequest: boolean = false,\n  isRouteRequest: boolean = false\n): Promise<DataResult> {\n  let resultType;\n  let result;\n\n  // Setup a promise we can race against so that abort signals short circuit\n  let reject: () => void;\n  let abortPromise = new Promise((_, r) => (reject = r));\n  let onReject = () => reject();\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant<Function>(\n      handler,\n      `Could not find the ${type} to run on the \"${match.route.id}\" route`\n    );\n\n    result = await Promise.race([\n      handler({ request, params: match.params }),\n      abortPromise,\n    ]);\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (result instanceof Response) {\n    let status = result.status;\n\n    // Process redirects\n    if (status >= 300 && status <= 399) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      // Support relative routing in redirects\n      let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n      let routePathnames = getPathContributingMatches(activeMatches).map(\n        (match) => match.pathnameBase\n      );\n      let requestPath = createURL(request.url).pathname;\n      let resolvedLocation = resolveTo(location, routePathnames, requestPath);\n      invariant(\n        createPath(resolvedLocation),\n        `Unable to resolve redirect location: ${result.headers.get(\"Location\")}`\n      );\n\n      // Prepend the basename to the redirect location if we have one\n      if (basename) {\n        let path = resolvedLocation.pathname;\n        resolvedLocation.pathname =\n          path === \"/\" ? basename : joinPaths([basename, path]);\n      }\n\n      location = createPath(resolvedLocation);\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result,\n      };\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    if (contentType && contentType.startsWith(\"application/json\")) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (result instanceof DeferredData) {\n    return { type: ResultType.deferred, deferredData: result };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\nfunction createRequest(\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission) {\n    let { formMethod, formEncType, formData } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    invariant(\n      typeof value === \"string\",\n      'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' +\n        'please use \"multipart/form-data\" instead.'\n    );\n    searchParams.append(key, value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds?: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = Object.assign(errors || {}, {\n        [boundaryMatch.route.id]: error,\n      });\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds && activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data;\n      // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data;\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n  if (pendingError) {\n    errors = pendingError;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key, , match] = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[]\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  matches.forEach((match) => {\n    let id = match.route.id;\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(\n  routes: AgnosticDataRouteObject[],\n  status: number,\n  statusText: string\n): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n  error: ErrorResponse;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-${status}-route__`,\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n    error: new ErrorResponse(status, statusText, null),\n  };\n}\n\nfunction getNotFoundMatches(routes: AgnosticDataRouteObject[]) {\n  return getShortCircuitMatches(routes, 404, \"Not Found\");\n}\n\nfunction getMethodNotAllowedMatches(routes: AgnosticDataRouteObject[]) {\n  return getShortCircuitMatches(routes, 405, \"Method Not Allowed\");\n}\n\nfunction getMethodNotAllowedResult(path: Location | string): ErrorResult {\n  let href = typeof path === \"string\" ? path : createPath(path);\n  console.warn(\n    \"You're trying to submit to a route that does not have an action.  To \" +\n      \"fix this, please add an `action` function to the route for \" +\n      `[${href}]`\n  );\n  return {\n    type: ResultType.error,\n    error: new ErrorResponse(405, \"Method Not Allowed\", \"\"),\n  };\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!(result instanceof Response)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    obj.response instanceof Response &&\n    (obj.type === ResultType.data || ResultType.error)\n  );\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  signal: AbortSignal,\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n//#endregion\n"],
  "mappings": "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",
  "names": ["Action", "PopStateEventType", "createMemoryHistory", "options", "initialEntries", "initialIndex", "v5Compat", "entries", "map", "entry", "index", "createMemoryLocation", "state", "undefined", "clampIndex", "length", "action", "Pop", "listener", "n", "Math", "min", "max", "getCurrentLocation", "to", "key", "location", "createLocation", "pathname", "warning", "charAt", "JSON", "stringify", "history", "createHref", "createPath", "encodeLocation", "push", "Push", "nextLocation", "splice", "replace", "Replace", "go", "delta", "listen", "fn", "createBrowserHistory", "createBrowserLocation", "window", "globalHistory", "search", "hash", "usr", "createBrowserHref", "getUrlBasedHistory", "createHashHistory", "createHashLocation", "parsePath", "substr", "createHashHref", "base", "document", "querySelector", "href", "getAttribute", "url", "hashIndex", "indexOf", "slice", "validateHashLocation", "cond", "message", "console", "warn", "Error", "e", "createKey", "random", "toString", "getHistoryState", "current", "path", "parsedPath", "searchIndex", "createURL", "origin", "URL", "getLocation", "validateLocation", "defaultView", "handlePop", "historyState", "pushState", "error", "assign", "replaceState", "addEventListener", "removeEventListener", "ResultType", "isIndexRoute", "route", "convertRoutesToDataRoutes", "routes", "parentPath", "allIds", "Set", "treePath", "id", "join", "invariant", "children", "has", "add", "indexRoute", "pathOrLayoutRoute", "matchRoutes", "locationArg", "basename", "stripBasename", "branches", "flattenRoutes", "rankRouteBranches", "matches", "i", "matchRouteBranch", "safelyDecodeURI", "parentsMeta", "forEach", "meta", "relativePath", "caseSensitive", "childrenIndex", "startsWith", "joinPaths", "routesMeta", "concat", "score", "computeScore", "sort", "a", "b", "compareIndexes", "paramRe", "dynamicSegmentValue", "indexRouteValue", "emptySegmentValue", "staticSegmentValue", "splatPenalty", "isSplat", "s", "segments", "split", "initialScore", "some", "filter", "reduce", "segment", "test", "siblings", "every", "branch", "matchedParams", "matchedPathname", "end", "remainingPathname", "match", "matchPath", "Object", "params", "pathnameBase", "normalizePathname", "generatePath", "_", "prefix", "__", "str", "star", "pattern", "matcher", "paramNames", "compilePath", "captureGroups", "memo", "paramName", "splatValue", "safelyDecodeURIComponent", "endsWith", "regexpSource", "RegExp", "value", "decodeURI", "decodeURIComponent", "toLowerCase", "startIndex", "nextChar", "resolvePath", "fromPathname", "toPathname", "resolvePathname", "normalizeSearch", "normalizeHash", "relativeSegments", "pop", "getInvalidPathError", "char", "field", "dest", "getPathContributingMatches", "resolveTo", "toArg", "routePathnames", "locationPathname", "isPathRelative", "includes", "isEmptyPath", "from", "routePathnameIndex", "toSegments", "shift", "hasExplicitTrailingSlash", "hasCurrentTrailingSlash", "getToPathname", "paths", "json", "data", "init", "responseInit", "status", "headers", "Headers", "set", "Response", "AbortedDeferredError", "DeferredData", "constructor", "pendingKeys", "subscriber", "Array", "isArray", "reject", "abortPromise", "Promise", "r", "controller", "AbortController", "onAbort", "unlistenAbortSignal", "signal", "acc", "trackPromise", "promise", "race", "then", "onSettle", "catch", "defineProperty", "get", "aborted", "delete", "done", "subscribe", "cancel", "abort", "v", "k", "resolveData", "resolve", "size", "unwrappedData", "unwrapTrackedPromise", "isTrackedPromise", "_tracked", "_error", "_data", "defer", "redirect", "ErrorResponse", "statusText", "isRouteErrorResponse", "IDLE_NAVIGATION", "formMethod", "formAction", "formEncType", "formData", "IDLE_FETCHER", "isBrowser", "createElement", "isServer", "createRouter", "dataRoutes", "unlistenHistory", "subscribers", "savedScrollPositions", "getScrollRestorationKey", "getScrollPosition", "initialScrollRestored", "initialMatches", "initialErrors", "getNotFoundMatches", "initialized", "m", "loader", "hydrationData", "router", "historyAction", "navigation", "restoreScrollPosition", "preventScrollReset", "revalidation", "loaderData", "actionData", "errors", "fetchers", "Map", "pendingAction", "HistoryAction", "pendingPreventScrollReset", "pendingNavigationController", "isUninterruptedRevalidation", "isRevalidationRequired", "cancelledDeferredRoutes", "cancelledFetcherLoads", "fetchControllers", "incrementingLoadId", "pendingNavigationLoadId", "fetchReloadIds", "fetchRedirectIds", "fetchLoadMatches", "activeDeferreds", "initialize", "startNavigation", "dispose", "clear", "deleteFetcher", "updateState", "newState", "completeNavigation", "isActionReload", "newLoaderData", "mergeLoaderData", "getSavedScrollPosition", "navigate", "opts", "submission", "normalizeNavigateOptions", "pendingError", "revalidate", "interruptActiveLoads", "startUninterruptedRevalidation", "overrideNavigation", "saveScrollPosition", "loadingNavigation", "notFoundMatches", "cancelActiveDeferreds", "isHashChangeOnly", "request", "createRequest", "pendingActionData", "findNearestBoundary", "actionOutput", "handleAction", "shortCircuited", "pendingActionError", "handleLoaders", "result", "actionMatch", "getTargetMatch", "getMethodNotAllowedResult", "callLoaderOrAction", "isRedirectResult", "redirectNavigation", "startRedirectNavigation", "isErrorResult", "boundaryMatch", "isDeferredResult", "matchesToLoad", "revalidatingFetchers", "getMatchesToLoad", "routeId", "fetcher", "revalidatingFetcher", "results", "loaderResults", "fetcherResults", "callLoadersAndMaybeResolveData", "findRedirect", "getLoaderRedirect", "processLoaderData", "deferredData", "markFetchRedirectsDone", "didAbortFetchLoads", "abortStaleFetchLoads", "getFetcher", "fetch", "abortFetcher", "setFetcherError", "handleFetcherAction", "handleFetcherLoader", "requestMatches", "existingFetcher", "abortController", "fetchRequest", "actionResult", "loadingFetcher", "revalidationRequest", "loadId", "loadFetcher", "staleKey", "doneFetcher", "resolveDeferredData", "redirectHistoryAction", "currentMatches", "fetchersToLoad", "all", "fetchMatches", "resolveDeferredResults", "markFetchersDone", "keys", "doneKeys", "landedId", "yeetedKeys", "predicate", "cancelledRouteIds", "dfd", "enableScrollRestoration", "positions", "getPosition", "getKey", "y", "userMatches", "createUseMatchesMatch", "_internalFetchControllers", "_internalActiveDeferreds", "validActionMethods", "validRequestMethods", "unstable_createStaticHandler", "query", "method", "methodNotAllowedMatches", "getMethodNotAllowedMatches", "statusCode", "loaderHeaders", "actionHeaders", "queryImpl", "queryRoute", "createRouterErrorResponse", "find", "values", "routeData", "routeMatch", "submit", "loadRouteData", "isQueryRouteResponse", "type", "isRedirectResponse", "response", "isRouteRequest", "Location", "context", "getLoaderMatchesUntilBoundary", "processRouteLoaderData", "body", "getStaticContextFromError", "newContext", "_deepestRenderedBoundaryId", "isFetcher", "stripHashFromPath", "searchParams", "convertFormDataToSearchParams", "hasNakedIndexQuery", "append", "boundaryId", "boundaryMatches", "findIndex", "navigationMatches", "isNewLoader", "shouldRevalidateLoader", "shouldRevalidate", "currentLoaderData", "currentMatch", "isNew", "isMissingData", "isNewRouteInstance", "currentPath", "currentLocation", "currentUrl", "currentParams", "nextUrl", "nextParams", "defaultShouldRevalidate", "routeChoice", "isStaticRequest", "resultType", "onReject", "handler", "activeMatches", "requestPath", "resolvedLocation", "contentType", "text", "deferred", "toUpperCase", "Request", "URLSearchParams", "foundError", "mergedLoaderData", "eligibleMatches", "reverse", "hasErrorBoundary", "getShortCircuitMatches", "obj", "isRevalidatingLoader", "unwrap", "getAll", "handle", "pathMatches"]
}
